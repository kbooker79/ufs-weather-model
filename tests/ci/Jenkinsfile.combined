matchedNode = []
generateBaselineNode = []
for (label in pullRequest.labels) {
   listOfLabelNodeNames = jenkins.model.Jenkins.instance.nodes.collect {
   node -> node.getLabelString().contains(label) ? node.name : null

   if ((label.matches(node.getLabelString()+"-(.*)"))) {
     matchedNode += node.getLabelString()
   }

   if ((label.matches("(.*)-BL"))) {
     generateBaselineNode += node.getLabelString() 
   }

 }
}

modifiedLabels = matchedNode.collect{"'" + it + "'"} 
baselineLabels = generateBaselineNode.collect{"'" + it + "'"} 

def generateStage(nodeLabel) {
    return {
        stage("Runs on ${nodeLabel}") {
            node(nodeLabel) {
               script {
                    echo "Running on ${nodeLabel}"
                    checkout([$class: 'GitSCM',
                                  branches: [[name:  env.GIT_BRANCH]],
                                  doGenerateSubmoduleConfigurations: false,
                                  extensions: [[$class: 'SubmoduleOption',
                                                disableSubmodules: false,
                                                parentCredentials: false,
                                                recursiveSubmodules: true,
                                                reference: '',
                                                trackingSubmodules: false],
                                                [$class: 'CleanBeforeCheckout'],
                                                [$class: 'CleanCheckout']],
                                  submoduleCfg: [],
                                  userRemoteConfigs: [[url: "https://github.com/ufs-community/ufs-weather-model.git"]]])
                    if (baselineLabels.contains(nodeLabel)) {
                      //println(nodeLabel+" will need baselines generated.")
                       sh '''
                        export machine=${NODE_NAME}
                          if [[ $machine =~ "Jet" ]] 
                          then
                            echo "Creating baselines on $machine"
                            export dprefix=/lfs1/NAGAPE/$ACCNR/$USER
                            #./rt.sh -a ${ACCNR} -c -r -l rt.conf
                          elif [[ $machine =~ "Hercules" ]]
                          then
                            echo "Creating baselines on $machine"
                            export dprefix=/work2/noaa/$ACCNR/$USER
                            sed "s|/noaa/stmp/|/noaa/$ACCNR/stmp/|g" -i rt.sh
                            #./rt.sh -a ${ACCNR} -c -e -l rt.conf
                          elif [[ $machine =~ "Orion" ]]
                          then
                            echo "Creating baselines on $machine"
                            export dprefix=/work2/noaa/$ACCNR/$USER
                            sed "s|/noaa/stmp/|/noaa/$ACCNR/stmp/|g" -i rt.sh
                            #./rt.sh -a ${ACCNR} -c -e -l rt.conf
                          elif [[ $machine =~ "Gaea" ]]
                          then 
                            echo "Creating baselines on $machine"
                            #./rt.sh -a ${ACCNR} -c -e -l rt.conf
                          else
                            echo "Creating baselines on $machine"
                           #./rt.sh -a ${ACCNR} -c -r -l rt.conf
                          fi
                       '''
                    }
                    else {
                      //println(nodeLabel+" will NOT need baselines generated.")
                       sh '''
                         export machine=${NODE_NAME}
                         pwd
                       '''
                    }
                }
              }
           }
       }
}

def parallelStagesMap = modifiedLabels.collectEntries {
    ["${it}" : generateStage(it)]
}

pipeline {
    agent none
    environment {
        ACCNR = 'epic'
        GITHUB_TOKEN = credentials('GithubJenkinsNew')
    }
    stages {
        stage('Run Tests in Parallel') {
            steps {
                script {
                    parallel parallelStagesMap
                }
            }
        }       
    }
}
