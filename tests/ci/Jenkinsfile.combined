matchedNode = []
generateBaselineNode = []
for (label in pullRequest.labels) {
   listOfLabelNodeNames = jenkins.model.Jenkins.instance.nodes.collect {
   node -> node.getLabelString().contains(label) ? node.name : null

   if ((label.matches(node.getLabelString()+"-(.*)"))) {
     matchedNode += node.getLabelString()
   }

   if ((label.matches(node.getLabelString()+"(.*)-BL"))) {
     generateBaselineNode += node.getLabelString() 
   }

 }
}

modifiedLabels = matchedNode.collect{"'" + it + "'"} 
baselineLabels = generateBaselineNode.collect{"'" + it + "'"} 
def generateStage(nodeLabel) {
    return {
        stage("Running on ${nodeLabel}") {
            node(nodeLabel) {
               cleanWs()
               checkout scm
               script {
                 try {
                    echo "Running on ${nodeLabel}"
                    if (baselineLabels.contains(nodeLabel)) {
                       sh '''
		       pwd
                      '''
                    }
                    else {
                       sh '''
                       pwd
                       '''
                    }
                } 
                catch(all) {
                      sh '''
                      echo "Made it here!"
                      '''
                }
              } 
           }
       }
    }
}

def parallelStagesMap = modifiedLabels.collectEntries {
    ["${it}" : generateStage(it)]
}

pipeline {
    agent none
    environment {
        ACCNR = 'epic'
        GITHUB_TOKEN = credentials('GithubJenkinsNew')
        GIT_URL = 'https://github.com/ufs-community/ufs-weather-model.git'
    }
    stages {
        stage('Run SonarQube Testing') {
            steps {
                script {
                    build job: '/ufs-weather-model/ufs-wm-sonarqube', parameters: [
                        string(name: 'BRANCH_NAME', value: env.CHANGE_BRANCH ?: 'develop'),
                        string(name: 'FORK_NAME', value: env.CHANGE_FORK ?: '')
                    ], wait: false
                }
            }
        }
        stage('Run Regression Tests in Parallel') {
            steps {
                script {
                    parallel parallelStagesMap
                }
            }
        }       
    }   
        post {
         success {
             node('built-in') {
                echo 'This will run only if successful.'
                sh '''
                  aws sns publish --topic-arn "arn:aws:sns:us-east-1:211527314271:Jenkins-CICD-Notifications" --region us-east-1 --message '{"version":"1.0","source":"custom","content":{"description":":sunny: Jenkins build *'"$JOB_NAME"' '"$BUILD_NUMBER"'* with *PR-'"$CHANGE_ID"'*  *succeeded*"}}'
               '''
             }
         }
         failure {
             node('built-in') {
                echo 'This will run only if the run was marked as unstable.'
                sh '''
                  aws sns publish --topic-arn "arn:aws:sns:us-east-1:211527314271:Jenkins-CICD-Notifications" --region us-east-1 --message '{"version":"1.0","source":"custom","content":{"description":":warning: Jenkins build *'"$JOB_NAME"' '"$BUILD_NUMBER"'* with *PR-'"$CHANGE_ID"'*  *failed!*"}}'
               '''
             }
         }
     } 
}
