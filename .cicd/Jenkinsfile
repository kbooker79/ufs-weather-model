pipeline {
  agent none
  parameters {
    string(name: 'BRANCH', defaultValue: 'develop', description: '')
  }
  
  stages {
    stage('Start Parallelworks Cluster') {
       agent {
        label 'built-in'   
       }
      steps {
        script {
          if (CHOICE_NODE == 'azclusternoaav2use1') {
                echo "Starting up Parallelworks cluster ${CHOICE_NODE}...this might take 5-10 minutes...please be patient."
                build job: 'parallel-works-jenkins-client/start-cluster', parameters: [string(name: 'PW_CLUSTER_NAME', value: 'azclusternoaav2use1'), string(name: 'PW_CLUSTER_SSH_KEY', value: '~/.ssh/pw_id_rsa'), string(name: 'JAVA_VERSION', value: '11')]
               
            } 
          else if (CHOICE_NODE == 'gclusternoaav2usc1') {
                echo "Starting up Parallelworks cluster ${CHOICE_NODE}...this might take 5-10 minutes...please be patient."
                build job: 'parallel-works-jenkins-client/start-cluster', parameters: [string(name: 'PW_CLUSTER_NAME', value: 'gclusternoaav2usc1'), string(name: 'PW_CLUSTER_SSH_KEY', value: '~/.ssh/pw_id_rsa'), string(name: 'JAVA_VERSION', value: '11')]
            }
          else if (CHOICE_NODE == 'pclusternoaav2use1') {
                 echo "Starting up Parallelworks cluster ${CHOICE_NODE}...this might take 5-10 minutes...please be patient."
                build job: 'parallel-works-jenkins-client/start-cluster', parameters: [string(name: 'PW_CLUSTER_NAME', value: 'pclusternoaav2use1'), string(name: 'PW_CLUSTER_SSH_KEY', value: '~/.ssh/pw_id_rsa'), string(name: 'JAVA_VERSION', value: '11')]
            }
          else {
                echo "${CHOICE_NODE} is NOT a Parallelworks cluster, moving on..."
            }
        }    
      }
    }
    stage('Run Regression Tests script') {
        agent {
          label "${CHOICE_NODE}"
        }
        environment {
        GITHUB_SSH_KEY = credentials('ParallelworksGithubPrivateKey')
        ACCNR = 'epic'
      }
      steps {
          script {
              
              if (CHOICE_NODE == 'azclusternoaav2use1') {
                env.NODE_PATH="/lustre/"
                
              }
              else if (CHOICE_NODE == 'gclusternoaav2usc1') {
                env.NODE_PATH="/lustre/"
                
              }
              else if (CHOICE_NODE == 'pclusternoaav2use1') {
                env.NODE_PATH="/lustre/"
                
              }
              else {
                echo "no valid path!"
          }
        }
         checkout([
        $class: 'GitSCM', 
        branches: [[name: '*/$BRANCH']], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [
           [$class: 'CleanBeforeCheckout']],
        submoduleCfg: [], 
        userRemoteConfigs: [[url: '$GIT_URL' ]]
    ])
        sh '''
        pwd
        git submodule update --init --recursive
        cd tests/
        if [[ "${CREATE_BASELINES}" = true ]] 
        then
        echo "Creating baselines for regressions tests"
        ./rt.sh -c -l rt.conf
        echo "Sending regression test logs to $GIT_URL"
        git config user.email "ecc.platform@noaa.gov"
        git config user.name "epic-cicd-jenkins"
        set +x
        cd ${WORKSPACE}
        export httpsorigin=`echo ${GIT_URL} | sed -e "s/github/$GITHUB_TOKEN@github/"` > /dev/null 2>&1 
        git remote -v | grep -w httpsorigin > /dev/null 2>&1 && git remote remove httpsorigin > /dev/null 2>&1
        git remote add httpsorigin $httpsorigin > /dev/null 2>&1
        git add tests/logs/RegressionTests_noaacloud.log
        git commit -m "[AutoRT] noaacloud Job Completed.\n\n\n on-behalf-of @ufs-community <ecc.platform@noaa.gov>" 
        git push httpsorigin HEAD:$BRANCH > /dev/null 2>&1
        set -x
        echo "Pushed logs to $GIT_URL $BRANCH"
        else
        echo "Running regression tests and NOT creating baselines"
        ./rt.sh -l rt.conf
        echo "Sending regression test logs to $GIT_URL"
        git config user.email "ecc.platform@noaa.gov"
        git config user.name "epic-cicd-jenkins"
        set +x
        cd ${WORKSPACE}
        export httpsorigin=`echo ${GIT_URL} | sed -e "s/github/$GITHUB_TOKEN@github/"` > /dev/null 2>&1 
        git remote -v | grep -w httpsorigin > /dev/null 2>&1 && git remote remove httpsorigin > /dev/null 2>&1
        git remote add httpsorigin $httpsorigin > /dev/null 2>&1
        git add tests/logs/RegressionTests_noaacloud.log
        git commit -m "[AutoRT] noaacloud Job Completed.\n\n\n on-behalf-of @ufs-community <ecc.platform@noaa.gov>" 
        git push httpsorigin HEAD:$BRANCH > /dev/null 2>&1
        set -x
        echo "Pushed logs to $GIT_URL $BRANCH"
        fi
        '''
      }
    }
    stage('Stop Parallelworks Cluster') {
       agent {
        label 'built-in'   
       }
      steps {
        script {
          if (CHOICE_NODE == 'azclusternoaav2use1') {
                echo "Shutting Down Parallelworks cluster ${CHOICE_NODE}."
                build job: 'parallel-works-jenkins-client/stop-cluster', parameters: [string(name: 'PW_CLUSTER_NAME', value: 'azclusternoaav2use1')]
               
            } 
          else if (CHOICE_NODE == 'gclusternoaav2usc1') {
                echo "Shutting Down Parallelworks cluster ${CHOICE_NODE}."
                build job: 'parallel-works-jenkins-client/stop-cluster', parameters: [string(name: 'PW_CLUSTER_NAME', value: 'gclusternoaav2usc1')]
            }
          else if (CHOICE_NODE == 'pclusternoaav2use1') {
                echo "Shutting Down Parallelworks cluster ${CHOICE_NODE}."
                build job: 'parallel-works-jenkins-client/stop-cluster', parameters: [string(name: 'PW_CLUSTER_NAME', value: 'pclusternoaav2use1')]
            }
          else {
                echo "${CHOICE_NODE} is NOT a Parallelworks cluster, moving on..."
            }
        }    
      }
    }
  }
}
